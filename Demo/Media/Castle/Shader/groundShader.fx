//--------------------------------------------------------------------------------------
// Copyright 2012 Intel Corporation
// All Rights Reserved
//
// Permission is granted to use, copy, distribute and prepare derivative works of this
// software for any purpose and without fee, provided, that the above copyright notice
// and this statement appear in all copies.  Intel makes no representations about the
// suitability of this software for any purpose.  THIS SOFTWARE IS PROVIDED "AS IS."
// INTEL SPECIFICALLY DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, AND ALL LIABILITY,
// INCLUDING CONSEQUENTIAL AND OTHER INDIRECT DAMAGES, FOR THE USE OF THIS SOFTWARE,
// INCLUDING LIABILITY FOR INFRINGEMENT OF ANY PROPRIETARY RIGHTS, AND INCLUDING THE
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  Intel does not
// assume any responsibility for any errors which may appear in this software nor any
// responsibility to update it.
//--------------------------------------------------------------------------------------
// Generated by ShaderGenerator.exe version 0.1
//--------------------------------------------------------------------------------------

// -------------------------------------
cbuffer cbPerModelValues
{
    row_major float4x4 World : WORLD;
    row_major float4x4 WorldViewProjection : WORLDVIEWPROJECTION;
    row_major float4x4 InverseWorld : INVERSEWORLD;
              float3   LightDirection  : Direction < string UIName = "Light Direction";  string Object = "TargetLight"; int Ref_ID=0; >;
              float4   EyePosition;
    row_major float4x4 LightWorldViewProjection;
};

// -------------------------------------
// TODO: Note: nothing sets these values yet
cbuffer cbPerFrameValues
{
    row_major float4x4  View;
    row_major float4x4  Projection;
              float3    AmbientColor;
              float3    LightColor;
              float3    TotalTimeInSeconds;
};

struct VS_INPUT
{
    float3 Position : POSITION; // Projected position
    float3 Normal   : NORMAL;
    float3 Tangent  : TANGENT;
    float3 Binormal : BINORMAL;
    float2 UV0      : TEXCOORD0;
};

// -------------------------------------
struct PS_INPUT
{
    float4 Position : SV_POSITION;
    float3 Normal   : NORMAL;
    float3 Tangent  : TANGENT;
    float3 Binormal : BINORMAL;
    float2 UV0      : TEXCOORD0;
};

// -------------------------------------
#ifdef _CPUT
    SamplerState SAMPLER0 : register( s0 );
    SamplerComparisonState SHADOW_SAMPLER : register( s1);
    Texture2D ambient : register( t0 );
    Texture2D diffuseGrass : register( t1 );
    Texture2D diffuseRock : register( t2 );
    Texture2D diffusewall : register( t3 );
    Texture2D maskRock : register( t4 );
    Texture2D maskWall : register( t5 );
    Texture2D normalGrass : register( t6 );
    Texture2D normalRock : register( t7 );
    Texture2D normalWall : register( t8 );
    Texture2D _Shadow : register( t9 );
#else
    texture2D ambient < string Name = "ambient"; string UIName = "ambient"; string ResourceType = "2D";>;
    sampler2D SAMPLER0 = sampler_state{ texture = (ambient);};
    texture2D diffuseGrass < string Name = "diffuseGrass"; string UIName = "diffuseGrass"; string ResourceType = "2D";>;
    sampler2D SAMPLER1 = sampler_state{ texture = (diffuseGrass);};
    texture2D diffuseRock < string Name = "diffuseRock"; string UIName = "diffuseRock"; string ResourceType = "2D";>;
    sampler2D SAMPLER2 = sampler_state{ texture = (diffuseRock);};
    texture2D diffusewall < string Name = "diffusewall"; string UIName = "diffusewall"; string ResourceType = "2D";>;
    sampler2D SAMPLER3 = sampler_state{ texture = (diffusewall);};
    texture2D maskRock < string Name = "maskRock"; string UIName = "maskRock"; string ResourceType = "2D";>;
    sampler2D SAMPLER4 = sampler_state{ texture = (maskRock);};
    texture2D maskWall < string Name = "maskWall"; string UIName = "maskWall"; string ResourceType = "2D";>;
    sampler2D SAMPLER5 = sampler_state{ texture = (maskWall);};
    texture2D normalGrass < string Name = "normalGrass"; string UIName = "normalGrass"; string ResourceType = "2D";>;
    sampler2D SAMPLER6 = sampler_state{ texture = (normalGrass);};
    texture2D normalRock < string Name = "normalRock"; string UIName = "normalRock"; string ResourceType = "2D";>;
    sampler2D SAMPLER7 = sampler_state{ texture = (normalRock);};
    texture2D normalWall < string Name = "normalWall"; string UIName = "normalWall"; string ResourceType = "2D";>;
    sampler2D SAMPLER8 = sampler_state{ texture = (normalWall);};
#endif

// -------------------------------------
float4 MASKROCK( PS_INPUT input )
{
    return 
#ifdef _CPUT
maskRock.Sample( SAMPLER0, input.UV0 )
#else
tex2D( SAMPLER4, input.UV0 )
#endif
;
}

// -------------------------------------
float4 MASKWALL( PS_INPUT input )
{
    return 
#ifdef _CPUT
maskWall.Sample( SAMPLER0, input.UV0 )
#else
tex2D( SAMPLER5, input.UV0 )
#endif
;
}

// -------------------------------------
float4 NMLAYER1( PS_INPUT input )
{
    return ((
#ifdef _CPUT
normalRock.Sample( SAMPLER0, (((input.UV0)) *(float2(10, 10).xyyy)) )
#else
tex2D( SAMPLER7, (((input.UV0)) *(float2(10, 10).xyyy)) )
#endif
) *(2)) -(1);
}

// -------------------------------------
float4 NMLAYER2( PS_INPUT input )
{
    return ((
#ifdef _CPUT
normalGrass.Sample( SAMPLER0, (((input.UV0)) *(float2(30, 30).xyyy)) )
#else
tex2D( SAMPLER6, (((input.UV0)) *(float2(30, 30).xyyy)) )
#endif
) *(2)) -(1);
}

// -------------------------------------
float4 NMLAYER3( PS_INPUT input )
{
    return ((
#ifdef _CPUT
normalWall.Sample( SAMPLER0, (((input.UV0)) *(float2(60, 60).xyyy)) )
#else
tex2D( SAMPLER8, (((input.UV0)) *(float2(60, 60).xyyy)) )
#endif
) *(2)) -(1);
}

// -------------------------------------
float4 DMLAYER1( PS_INPUT input )
{
    return 
#ifdef _CPUT
diffuseRock.Sample( SAMPLER0, (((input.UV0)) *(float2(10, 10).xyyy)) )
#else
tex2D( SAMPLER2, (((input.UV0)) *(float2(10, 10).xyyy)) )
#endif
;
}

// -------------------------------------
float4 DMLAYER2( PS_INPUT input )
{
    return 
#ifdef _CPUT
diffuseGrass.Sample( SAMPLER0, (((input.UV0)) *(float2(30, 30).xyyy)) )
#else
tex2D( SAMPLER1, (((input.UV0)) *(float2(30, 30).xyyy)) )
#endif
;
}

// -------------------------------------
float4 DMLAYER3( PS_INPUT input )
{
    return 
#ifdef _CPUT
diffusewall.Sample( SAMPLER0, (((input.UV0)) *(float2(60, 60).xyyy)) )
#else
tex2D( SAMPLER3, (((input.UV0)) *(float2(60, 60).xyyy)) )
#endif
;
}

// -------------------------------------
float4 DMLAYER4( PS_INPUT input )
{
    return 
#ifdef _CPUT
ambient.Sample( SAMPLER0, input.UV0 )
#else
tex2D( SAMPLER0, input.UV0 )
#endif
;
}

// -------------------------------------
float4 NORMALLERP1( PS_INPUT input )
{
    return lerp( (NMLAYER2(input) ), ( NMLAYER1(input) ), ( MASKROCK(input) ) );
}

// -------------------------------------
float4 NORMALLERP2( PS_INPUT input )
{
    return lerp( (NORMALLERP1(input) ), ( NMLAYER3(input) ), ( MASKWALL(input) ) );
}

// -------------------------------------
float4 DIFFUSELERP1( PS_INPUT input )
{
    return lerp( (DMLAYER2(input) ), ( DMLAYER1(input) ), ( MASKROCK(input) ) );
}

// -------------------------------------
float4 DIFFUSELERP2( PS_INPUT input )
{
    return lerp( (DIFFUSELERP1(input) ), ( DMLAYER3(input) ), ( MASKWALL(input) ) );
}

// -------------------------------------
float4 DIFFUSELERP3( PS_INPUT input )
{
    return lerp( (DIFFUSELERP2(input) ), ( DMLAYER4(input) ), ( (( (DMLAYER4(input) ).a )) *(1.5) ) );
}

// -------------------------------------
float4 DIFFUSE( PS_INPUT input )
{
    return DIFFUSELERP3(input);
}

// -------------------------------------
float4 NORMAL( PS_INPUT input )
{
    return NORMALLERP2(input);
}

// -------------------------------------
float4 SPECULAR( PS_INPUT input )
{
    return (DIFFUSELERP2(input)) *(0.5);
}

// -------------------------------------
float4 AMBIENT( PS_INPUT input )
{
    return DIFFUSELERP2(input);
}

// -------------------------------------
PS_INPUT VSMain( VS_INPUT input )
{
    PS_INPUT output = (PS_INPUT)0;

    output.Position      = mul( float4( input.Position, 1.0f), WorldViewProjection );
 
	// TODO: transform the light into object space instead of the normal into world space
    output.Normal   = mul( input.Normal, (float3x3)World );
    output.Tangent  = mul( input.Tangent, (float3x3)World );
    output.Binormal = mul( input.Binormal, (float3x3)World );
    output.UV0 = input.UV0;
    
    return output;
}

// -------------------------------------
float4 PSMain( PS_INPUT input ) : SV_Target
{
    float4 result = float4(0,0,0,1);

    float3 normal   = input.Normal;
    float3 tangent  = input.Tangent;
    float3 binormal = input.Binormal;
    float3x3 worldToTangent = float3x3(tangent, binormal, normal);
    normal = normalize( mul( NORMAL(input), worldToTangent ));

    // Ambient-related computation
    float3 ambient = AmbientColor * AMBIENT(input);
    result.xyz +=  ambient;
#ifdef _CPUT
   float3 lightDirection = -LightDirection;
#else
   float3 lightDirection = LightDirection;
#endif

    // Diffuse-related computation
    float  nDotL         = saturate( dot( normal, lightDirection ) );
    float3 diffuse       = LightColor * nDotL * DIFFUSE(input);
    result.xyz += diffuse;

    return result;
}

// -------------------------------------
technique DefaultTechnique
{
    pass pass1
    {
        VertexShader        = compile vs_3_0 VSMain();
        PixelShader         = compile ps_3_0 PSMain();
        ZWriteEnable        = true;
    }
}

